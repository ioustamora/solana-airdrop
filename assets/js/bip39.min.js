/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/bip39@3.0.4/src/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
 "use strict";Object.defineProperty(exports,"__esModule",{value:!0});const createHash=require("create-hash"),pbkdf2_1=require("pbkdf2"),randomBytes=require("randombytes"),_wordlists_1=require("./_wordlists");let DEFAULT_WORDLIST=_wordlists_1._default;const INVALID_MNEMONIC="Invalid mnemonic",INVALID_ENTROPY="Invalid entropy",INVALID_CHECKSUM="Invalid mnemonic checksum",WORDLIST_REQUIRED="A wordlist is required but a default could not be found.\nPlease pass a 2048 word array explicitly.";function pbkdf2Promise(e,r,o,n,t){return Promise.resolve().then((()=>new Promise(((i,s)=>{pbkdf2_1.pbkdf2(e,r,o,n,t,((e,r)=>e?s(e):i(r)))}))))}function normalize(e){return(e||"").normalize("NFKD")}function lpad(e,r,o){for(;e.length<o;)e=r+e;return e}function binaryToByte(e){return parseInt(e,2)}function bytesToBinary(e){return e.map((e=>lpad(e.toString(2),"0",8))).join("")}function deriveChecksumBits(e){const r=8*e.length/32,o=createHash("sha256").update(e).digest();return bytesToBinary(Array.from(o)).slice(0,r)}function salt(e){return"mnemonic"+(e||"")}function mnemonicToSeedSync(e,r){const o=Buffer.from(normalize(e),"utf8"),n=Buffer.from(salt(normalize(r)),"utf8");return pbkdf2_1.pbkdf2Sync(o,n,2048,64,"sha512")}function mnemonicToSeed(e,r){return Promise.resolve().then((()=>pbkdf2Promise(Buffer.from(normalize(e),"utf8"),Buffer.from(salt(normalize(r)),"utf8"),2048,64,"sha512")))}function mnemonicToEntropy(e,r){if(!(r=r||DEFAULT_WORDLIST))throw new Error(WORDLIST_REQUIRED);const o=normalize(e).split(" ");if(o.length%3!=0)throw new Error(INVALID_MNEMONIC);const n=o.map((e=>{const o=r.indexOf(e);if(-1===o)throw new Error(INVALID_MNEMONIC);return lpad(o.toString(2),"0",11)})).join(""),t=32*Math.floor(n.length/33),i=n.slice(0,t),s=n.slice(t),f=i.match(/(.{1,8})/g).map(binaryToByte);if(f.length<16)throw new Error(INVALID_ENTROPY);if(f.length>32)throw new Error(INVALID_ENTROPY);if(f.length%4!=0)throw new Error(INVALID_ENTROPY);const l=Buffer.from(f);if(deriveChecksumBits(l)!==s)throw new Error(INVALID_CHECKSUM);return l.toString("hex")}function entropyToMnemonic(e,r){if(Buffer.isBuffer(e)||(e=Buffer.from(e,"hex")),!(r=r||DEFAULT_WORDLIST))throw new Error(WORDLIST_REQUIRED);if(e.length<16)throw new TypeError(INVALID_ENTROPY);if(e.length>32)throw new TypeError(INVALID_ENTROPY);if(e.length%4!=0)throw new TypeError(INVALID_ENTROPY);const o=(bytesToBinary(Array.from(e))+deriveChecksumBits(e)).match(/(.{1,11})/g).map((e=>{const o=binaryToByte(e);return r[o]}));return"あいこくしん"===r[0]?o.join("　"):o.join(" ")}function generateMnemonic(e,r,o){if((e=e||128)%32!=0)throw new TypeError(INVALID_ENTROPY);return entropyToMnemonic((r=r||randomBytes)(e/8),o)}function validateMnemonic(e,r){try{mnemonicToEntropy(e,r)}catch(e){return!1}return!0}function setDefaultWordlist(e){const r=_wordlists_1.wordlists[e];if(!r)throw new Error('Could not find wordlist for language "'+e+'"');DEFAULT_WORDLIST=r}function getDefaultWordlist(){if(!DEFAULT_WORDLIST)throw new Error("No Default Wordlist set");return Object.keys(_wordlists_1.wordlists).filter((e=>"JA"!==e&&"EN"!==e&&_wordlists_1.wordlists[e].every(((e,r)=>e===DEFAULT_WORDLIST[r]))))[0]}exports.mnemonicToSeedSync=mnemonicToSeedSync,exports.mnemonicToSeed=mnemonicToSeed,exports.mnemonicToEntropy=mnemonicToEntropy,exports.entropyToMnemonic=entropyToMnemonic,exports.generateMnemonic=generateMnemonic,exports.validateMnemonic=validateMnemonic,exports.setDefaultWordlist=setDefaultWordlist,exports.getDefaultWordlist=getDefaultWordlist;var _wordlists_2=require("./_wordlists");exports.wordlists=_wordlists_2.wordlists;
 //# sourceMappingURL=/sm/2272f1445037e0156db4d911e364aee319f934a0af84388250a4ebb6da9183b3.map